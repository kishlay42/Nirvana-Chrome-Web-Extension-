"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.buildUrl = exports.getSource = exports._internals = void 0;
const version_js_1 = require("../version.js");
const https_1 = __importDefault(require("https"));
const querystring_1 = __importDefault(require("querystring"));
const errors_js_1 = require("./errors.js");
/**
 * This `_internals` object is needed to support stubbing/spying of
 * certain functions in this file.
 * https://deno.land/manual@v1.28.3/basics/testing/mocking
 *
 * It's also useful to encapsulate functions that are polyfilled.
 */
exports._internals = {
    execute: execute,
    getBaseUrl: getBaseUrl,
};
/** Facilitates stubbing in tests, e.g. localhost as the base url */
function getBaseUrl() {
    return "https://serpapi.com";
}
function getSource() {
    var _a, _b;
    const moduleSource = `serpapi@${version_js_1.version}`;
    if (typeof Deno == "object") {
        const denoVersion = (_a = Deno.version) === null || _a === void 0 ? void 0 : _a.deno;
        if (denoVersion) {
            return `deno@${denoVersion},${moduleSource}`;
        }
        // @ts-ignore: scope of nodejs
    }
    else if (typeof process == "object") {
        // @ts-ignore: scope of nodejs
        const nodeVersion = (_b = process.versions) === null || _b === void 0 ? void 0 : _b.node;
        if (nodeVersion) {
            return `nodejs@${nodeVersion},${moduleSource}`;
        }
    }
    return `nodejs,${moduleSource}`;
}
exports.getSource = getSource;
function buildUrl(path, parameters) {
    const clonedParams = Object.assign({}, parameters);
    for (const k in clonedParams) {
        if (clonedParams[k] === undefined) {
            delete clonedParams[k];
        }
    }
    return `${exports._internals.getBaseUrl()}${path}?${querystring_1.default.stringify(clonedParams)}`;
}
exports.buildUrl = buildUrl;
function execute(path, parameters, timeout) {
    const url = buildUrl(path, Object.assign(Object.assign({}, parameters), { source: getSource() }));
    return new Promise((resolve, reject) => {
        let timer;
        const req = https_1.default.get(url, (resp) => {
            resp.setEncoding("utf8");
            let data = "";
            // A chunk of data has been recieved.
            resp.on("data", (chunk) => {
                data += chunk;
            });
            // The whole response has been received. Print out the result.
            resp.on("end", () => {
                try {
                    if (resp.statusCode == 200) {
                        resolve(data);
                    }
                    else {
                        reject(data);
                    }
                }
                catch (e) {
                    reject(e);
                }
                finally {
                    if (timer)
                        clearTimeout(timer);
                }
            });
        }).on("error", (err) => {
            reject(err);
            if (timer)
                clearTimeout(timer);
        });
        if (timeout > 0) {
            timer = setTimeout(() => {
                reject(new errors_js_1.RequestTimeoutError());
                req.destroy();
            }, timeout);
        }
    });
}
exports.execute = execute;
